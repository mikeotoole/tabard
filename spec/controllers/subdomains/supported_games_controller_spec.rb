require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Subdomains::SupportedGamesController do
  let(:member) { DefaultObjects.user }
  let(:admin) { DefaultObjects.community_admin }
  let(:non_member) { create(:user_profile).user }
  let(:community) { DefaultObjects.community }
  
  let(:supported_game) { create(:supported_game) }
  let(:valid_attributes) { attributes_for(:supported_game_att) }

  before(:each) do
    @request.host = "#{community.subdomain}.example.com"
  end

  describe "GET index" do
    it "assigns all supported_games as @supported_games when authenticated as a member" do
      sign_in member
      get :index
      assigns(:supported_games).should eq(community.supported_games)
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :index
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :index
      response.should be_forbidden
    end
  end

  describe "GET show" do
    it "assigns the requested supported_game as @supported_game when authenticated as a member" do
      sign_in member
      supported_game
      get :show, :id => supported_game.id
      assigns(:supported_game).should eq(supported_game)
    end
    
    it "should redirected to new user session path when not authenticated as a user" do
      get :show, :id => supported_game
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :show, :id => supported_game
      response.should be_forbidden
    end 
  end

  describe "GET new" do
    it "assigns a new supported_game as @supported_game when authenticated as community admin" do
      sign_in admin
      get :new
      assigns(:supported_game).should be_a_new(SupportedGame)
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :new
      response.should redirect_to(new_user_session_path)
    end 
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :new
      response.should be_forbidden
    end
    
    it "should respond forbidden when a member without permissions" do
      sign_in member
      get :new
      response.should be_forbidden
    end
  end

  describe "GET edit" do
    it "assigns the requested supported_game as @supported_game when authenticated as community admin" do
      sign_in admin
      supported_game
      get :edit, :id => supported_game.id
      assigns(:supported_game).should eq(supported_game)
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :edit, :id => supported_game.id.to_s
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :edit, :id => supported_game.id.to_s
      response.should be_forbidden
    end 
    
    it "should respond forbidden when a member without permissions" do
      sign_in member
      get :edit, :id => supported_game.id.to_s
      response.should be_forbidden
    end
  end

  describe "POST create when authenticated as community admin" do
    before(:each) {
      sign_in admin
    }
    
    describe "with valid params" do
      it "creates a new SupportedGame" do
        expect {
          post :create, :supported_game => valid_attributes
        }.to change(SupportedGame, :count).by(1)
      end

      it "assigns a newly created supported_game as @supported_game" do
        post :create, :supported_game => valid_attributes
        assigns(:supported_game).should be_a(SupportedGame)
        assigns(:supported_game).should be_persisted
      end

      it "redirects to the created supported_game" do
        post :create, :supported_game => valid_attributes
        response.should redirect_to(SupportedGame.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved supported_game as @supported_game" do
        post :create, :supported_game => {:game_type => DefaultObjects.wow.class.name}
        assigns(:supported_game).should be_a_new(SupportedGame)
      end

      it "re-renders the 'new' template" do
        post :create, :supported_game => {:game_type => DefaultObjects.wow.class.name}
        response.should render_template("new")
      end
    end
  end
  
  describe "POST create" do
    it "should redirected to new user session path when not authenticated as a user" do
      post :create, :supported_game => valid_attributes
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      post :create, :supported_game => valid_attributes
      response.should be_forbidden
    end
    
    it "should respond forbidden when a member without permissions" do
      sign_in member
      post :create, :supported_game => valid_attributes
      response.should be_forbidden
    end   
  end

  describe "PUT update when authenticated as community admin" do
    before(:each) {
      sign_in admin
    }
    
    describe "with valid params" do
      it "updates the requested supported_game" do
        # Assuming there are no other subdomains_supported_games in the database, this
        # specifies that the Subdomains::SupportedGame created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        SupportedGame.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => supported_game.id, :supported_game => {'these' => 'params'}
      end

      it "assigns the requested supported_game as @supported_game" do
        put :update, :id => supported_game.id, :supported_game => valid_attributes
        assigns(:supported_game).should eq(supported_game)
      end

      it "redirects to the supported_game" do
        put :update, :id => supported_game.id, :supported_game => valid_attributes
        response.should redirect_to(supported_game)
      end
    end

    describe "with invalid params" do
      it "assigns the supported_game as @supported_game" do
        # Trigger the behavior that occurs when invalid params are submitted
        SupportedGame.any_instance.stub(:save).and_return(false)
        put :update, :id => supported_game.id, :supported_game => {:game_type => DefaultObjects.wow.class.name}
        assigns(:supported_game).should eq(supported_game)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        SupportedGame.any_instance.stub(:save).and_return(false)
        put :update, :id => supported_game.id, :supported_game => {:game_type => DefaultObjects.wow.class.name}
        response.should render_template("edit")
      end
    end
  end

  describe "PUT update" do
    it "should redirected to new user session path when not authenticated as a user" do
      put :update, :id => supported_game.id, :supported_game => valid_attributes
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      put :update, :id => supported_game.id, :supported_game => valid_attributes
      response.should be_forbidden
    end
    
    it "should respond forbidden when a member without permissions" do
      sign_in member
      put :update, :id => supported_game.id, :supported_game => valid_attributes
      response.should be_forbidden
    end   
  end

  describe "DELETE destroy" do
    it "destroys the requested supported_game when authenticated as community admin" do
      sign_in admin
      supported_game
      expect {
        delete :destroy, :id => supported_game.id
      }.to change(SupportedGame, :count).by(-1)
    end

    it "redirects to the subdomains_supported_games list when authenticated as community admin" do
      sign_in admin
      delete :destroy, :id => supported_game.id
      response.should redirect_to(supported_games_url)
    end
    
    it "should redirected to new user session path when not authenticated as a user" do
      delete :destroy, :id => supported_game.id.to_s
      response.should redirect_to(new_user_session_path)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      delete :destroy, :id => supported_game.id.to_s
      response.should be_forbidden
    end
    
    it "should respond forbidden when a member without permissions" do
      sign_in member
      delete :destroy, :id => supported_game.id.to_s
      response.should be_forbidden
    end
  end

end
