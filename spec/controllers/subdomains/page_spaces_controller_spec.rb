require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Subdomains::PageSpacesController do
  let(:user) { DefaultObjects.user }
  let(:admin) { DefaultObjects.community_admin }
  let(:non_member) { create(:user_profile).user }
  let(:community) { DefaultObjects.community }
  let(:space) { DefaultObjects.page_space }
  
  before(:each) do
    @request.host = "#{community.subdomain}.example.com"
  end

  describe "GET index" do
    it "assigns all page_spaces as @page_spaces when authenticated as a member" do
      space
      sign_in user
      get :index
      assigns(:page_spaces).should eq([space])
    end
    
    it "should render the 'index' template when authenticated as a member" do
      sign_in user
      get :index
      response.should render_template("index")
    end
    
    it "should redirected to new user session path when not authenticated as a user" do
      get :index
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :index
      response.should be_forbidden
    end
  end

  describe "GET show" do
    it "assigns the requested page_space as @page_space when authenticated as a member" do
      sign_in user
      get :show, :id => space
      assigns(:page_space).should eq(space)
    end
    
    it "should render the 'show' template when authenticated as a member" do
      sign_in admin
      get :show, :id => space
      response.should render_template("show")
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :show, :id => space
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :show, :id => space
      response.should be_forbidden
    end    
  end

  describe "GET new" do
    it "assigns a new page_space as @page_space when authenticated as community admin" do
      sign_in admin
      get :new
      assigns(:page_space).should be_a_new(PageSpace)
    end
    
    it "should render the 'new' template when authenticated as community admin" do
      sign_in admin
      get :new
      response.should render_template("new")
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :new
      response.should redirect_to(new_user_session_url)
    end 
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :new
      response.should be_forbidden
    end
  end

  describe "GET edit" do
    it "assigns the requested page_space as @page_space when authenticated as community admin" do
      sign_in admin
      get :edit, :id => space.id.to_s
      assigns(:page_space).should eq(space)
    end
    
    it "should render the 'edit' template when authenticated as community admin" do
      sign_in admin
      get :edit, :id => space.id.to_s
      response.should render_template("edit")
    end
    
    it "should redirect to new user session path when not authenticated as a user" do
      get :edit, :id => space.id.to_s
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      get :edit, :id => space.id.to_s
      response.should be_forbidden
    end   
  end

  describe "POST create when authenticated as admin" do
    before(:each) {
      sign_in admin
    }
  
    describe "with valid params" do
      it "creates a new PageSpace" do
        expect {
          post :create, :page_space => attributes_for(:page_space)
        }.to change(PageSpace, :count).by(1)
      end

      it "assigns a newly created page_space as @page_space" do
        post :create, :page_space => attributes_for(:page_space)
        assigns(:page_space).should be_a(PageSpace)
        assigns(:page_space).should be_persisted
      end

      it "redirects to the created page_space" do
        post :create, :page_space => attributes_for(:page_space)
        response.should redirect_to(PageSpace.last)
      end
      
      it "should create an activity" do
        expect {
          post :create, :page_space => attributes_for(:page_space)
        }.to change(Activity, :count).by(1)
        
        activity = Activity.last
        activity.target_type.should eql "PageSpace"
        activity.action.should eql 'created'
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved page_space as @page_space" do
        post :create, :page_space => attributes_for(:page_space, :name => nil)
        assigns(:page_space).should be_a_new(PageSpace)
      end

      it "re-renders the 'new' template" do
        post :create, :page_space => attributes_for(:page_space, :name => nil)
        response.should render_template("new")
      end
      
      it "should not create an activity" do
        expect {
          post :create, :page_space => attributes_for(:page_space, :name => nil)
        }.to change(Activity, :count).by(0)
      end
    end
  end
  
  describe "POST create" do
    it "should redirected to new user session path when not authenticated as a user" do
      post :create, :page_space => attributes_for(:page_space)
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      post :create, :page_space => attributes_for(:page_space)
      response.should be_forbidden
    end    
  end

  describe "PUT update when authenticated as owner" do
    before(:each) {
      sign_in admin
    }
  
    describe "with valid params" do
      it "updates the requested page_space" do
        put :update, :id => space.id, :page_space => {:name => "New Name"}
        PageSpace.find(space).name.should eql "New Name"
      end

      it "assigns the requested page_space as @page_space" do
        put :update, :id => space.id, :page_space => {:name => "New Name"}
        assigns(:page_space).should eq(space)
      end

      it "redirects to the page_space" do
        put :update, :id => space.id, :page_space => {:name => "New Name"}
        response.should redirect_to(space)
      end
      
      it "should create an Activity when attributes change" do
        put :update, :id => space.id, :page_space => {:name => "New Name"}
        activity = Activity.last
        activity.target_type.should eql "PageSpace"
        activity.action.should eql 'edited'
      end
      
      it "should not create an Activity when attributes don't change" do        
        space
        expect {
          put :update, :id => space.id, :page_space => {:name => space.name}
        }.to change(Activity, :count).by(0)
      end
    end

    describe "with invalid params" do
      it "assigns the page_space as @page_space" do
        put :update, :id => space.id.to_s, :page_space => {:name => nil}
        assigns(:page_space).should eq(space)
      end

      it "re-renders the 'edit' template" do
        put :update, :id => space.id.to_s, :page_space => {:name => nil}
        response.should render_template("edit")
      end
    end
  end

  describe "PUT update" do
    it "should redirected to new user session path when not authenticated as a user" do
      put :update, :id => space.id, :page_space => {:name => "New Name"}
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      put :update, :id => space.id, :page_space => {:name => "New Name"}
      response.should be_forbidden
    end    
  end

  describe "DELETE destroy" do
    it "destroys the requested page_space when authenticated as a member" do
      space
      sign_in admin
      expect {
        delete :destroy, :id => space.id.to_s
      }.to change(PageSpace, :count).by(-1)
    end

    it "redirects to the page_space list when authenticated as a member" do
      sign_in admin
      delete :destroy, :id => space.id.to_s
      response.should redirect_to(page_spaces_url)
    end
    
    it "should redirected to new user session path when not authenticated as a user" do
      delete :destroy, :id => space.id.to_s
      response.should redirect_to(new_user_session_url)
    end
    
    it "should respond forbidden when not a member" do
      sign_in non_member
      delete :destroy, :id => space.id.to_s
      response.should be_forbidden
    end
  end
  
end
