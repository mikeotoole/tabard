require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Subdomains::EventsController do
  let(:member) { DefaultObjects.user }
  let(:admin) { DefaultObjects.community_admin }
  let(:non_member) { create(:user_profile).user }
  let(:community) { DefaultObjects.community }
  let(:event) { create(:event, :is_public => true) }
  let(:private_event) { create(:private_event) }

  before(:each) do
    @request.host = "#{community.subdomain}.example.com"
  end

  describe "GET index" do
    it "assigns all events as @events when authenticated as a member" do
      event
      sign_in member
      get :index
      assigns(:events).should eq([event])
    end

    it "should redirect to new user session path when not authenticated as a user" do
      get :index
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      get :index
      response.should be_forbidden
    end

    it "renders the 'index' template when authenticated as a member" do
      sign_in member
      get :index
      response.should render_template("index")
    end
  end

  describe "GET show" do
    it "assigns the requested event as @event when authenticated as a member" do
      sign_in member
      get :show, :id => event
      assigns(:event).should eq(event)
    end

    it "should redirected to new user session path when not authenticated as a user" do
      get :show, :id => event
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      get :show, :id => event
      response.should be_forbidden
    end

    it "renders the 'show' template when authenticated as a member" do
      sign_in member
      get :show, :id => event
      response.should render_template("show")
    end
  end

  describe "GET new" do
    it "assigns a new event as @event when authenticated as community admin" do
      sign_in admin
      get :new
      assigns(:event).should be_a_new(Event)
    end

    it "should redirect to new user session path when not authenticated as a user" do
      get :new
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      get :new
      response.should be_forbidden
    end

    it "should respond forbidden when not admin" do
      sign_in member
      get :new
      response.should be_forbidden
    end

    it "renders the 'new' template when authenticated as community admin" do
      sign_in admin
      post :new
      response.should render_template("new")
    end
  end

  describe "GET edit" do
    it "assigns the requested event as @event when authenticated as community admin" do
      sign_in admin
      get :edit, :id => event.id.to_s
      assigns(:event).should eq(event)
    end

    it "should redirect to new user session path when not authenticated as a user" do
      get :edit, :id => event.id.to_s
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      get :edit, :id => event.id.to_s
      response.should be_forbidden
    end

    it "renders the 'edit' template when authenticated as community admin" do
      sign_in admin
      get :edit, :id => event.id.to_s
      response.should render_template("edit")
    end
  end

  describe "POST create when authenticated as admin" do
    before(:each) {
      sign_in admin
    }

    describe "with valid params" do
      it "creates a new Event" do
        expect {
          post :create, :event => attributes_for(:event)
        }.to change(Event, :count).by(1)
      end

      it "assigns a newly created event as @event" do
        post :create, :event => attributes_for(:event)
        assigns(:event).should be_a(Event)
        assigns(:event).should be_persisted
      end

      it "redirects to the created event" do
        post :create, :event => attributes_for(:event)
        response.should redirect_to(Event.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved event as @event" do
        post :create, :event => attributes_for(:event, :body => nil)
        assigns(:event).should be_a_new(Event)
      end

      it "re-renders the 'new' template" do
        post :create, :event => attributes_for(:event, :body => nil)
        response.should render_template("new")
      end
    end
  end

  describe "POST create" do
    it "should redirected to new user session path when not authenticated as a user" do
      post :create, :event => attributes_for(:event)
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      post :create, :event => attributes_for(:event)
      response.should be_forbidden
    end

    it "should respond forbidden when not admin" do
      sign_in member
      post :create, :event => attributes_for(:event)
      response.should be_forbidden
    end
  end

  describe "PUT update when authenticated as owner" do
    before(:each) {
      sign_in admin
    }

    describe "with valid params" do
      it "updates the requested event" do
        event
        Event.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => event.id, :event => {'these' => 'params'}
      end

      it "assigns the requested event as @event" do
        put :update, :id => event.id, :event => {:body => "New Body"}
        assigns(:event).should eq(event)
      end

      it "redirects to the event" do
        put :update, :id => event.id, :event => {:body => "New Body"}
        response.should redirect_to(event)
      end
    end

    describe "with invalid params" do
      it "assigns the event as @event" do
        put :update, :id => event.id.to_s, :event => {:body => nil}
        assigns(:event).should eq(event)
      end

      it "re-renders the 'edit' template" do
        put :update, :id => event.id.to_s, :event => {:body => nil}
        response.should render_template("edit")
      end
    end
  end

  describe "PUT update" do
    it "should redirected to new user session path when not authenticated as a user" do
      put :update, :id => event.id, :event => {:body => "New Body"}
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      put :update, :id => event.id, :event => {:body => "New Body"}
      response.should be_forbidden
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested event when authenticated as admin" do
      event
      sign_in admin
      expect {
        delete :destroy, :id => event.id.to_s
      }.to change(Event, :count).by(-1)
    end

    it "redirects to the event list when authenticated as admin" do
      sign_in admin
      delete :destroy, :id => event.id.to_s
      response.should redirect_to(events_url)
    end

    it "should redirected to new user session path when not authenticated as a user" do
      delete :destroy, :id => event.id.to_s
      response.should redirect_to(new_user_session_url(subdomain: 'secure', protocol: "https://"))
    end

    it "should respond forbidden when not a member" do
      sign_in non_member
      delete :destroy, :id => event.id.to_s
      response.should be_forbidden
    end

    it "should respond forbidden when not admin" do
      sign_in member
      delete :destroy, :id => event.id.to_s
      response.should be_forbidden
    end
  end

#   describe "POST attend" do
#     it "should mark user as attending when authenticated as community member" do
#       sign_in member
#       member.user_profile.attending_events.should be_empty
#       post :attend, :id => event.id.to_s
#       User.find(member).user_profile.attending_events.should eq([event])
#     end
#
#     it "should redirect to event when authenticated as community member" do
#       sign_in member
#       post :attend, :id => event.id.to_s
#       response.should redirect_to(event)
#     end
#
#     it "should redirect to new user session path when not authenticated as a user" do
#       post :attend, :id => event.id.to_s
#       response.should redirect_to(new_user_session_path)
#     end
#
#     it "should respond forbidden when not a member" do
#       sign_in non_member
#       post :attend, :id => event.id.to_s
#       response.should be_forbidden
#     end
#
#     it "should respond forbidden when invite only and member does not have invite" do
#       sign_in member
#       post :attend, :id => invite_only.id.to_s
#       response.should be_forbidden
#     end
#
#     it "should mark user as attending when invite only and member does have invite" do
#       sign_in member
#       member.user_profile.attending_events.should be_empty
#       invite_only.invites.create(:user_profile => member)
#       post :attend, :id => invite_only.id.to_s
#       User.find(member).user_profile.attending_events.should eq([invite_only])
#     end
#
#     it "should respond forbidden when event is in the past" do
#       sign_in member
#       past_event = create(:event, :start_time => Time.now - (120 * 60), :end_time => Time.now - (60 * 60))
#       past_event.should be_valid
#       post :attend, :id => past_event.id.to_s
#       response.should be_forbidden
#     end
#   end
#
#   describe "POST invite" do
#     it "should create invite when authenticated as community admin" do
#       sign_in admin
#       member.user_profile.invited_events.should be_empty
#       post :invite, :id => event.id.to_s, :invite => {:user_profile_id => member.id}
#       User.find(member).user_profile.invited_events.should eq([event])
#     end
#
#     it "should redirect to event when authenticated as community admin" do
#       sign_in admin
#       post :invite, :id => event.id.to_s, :invite => {:user_profile_id => member.id}
#       response.should redirect_to(event)
#     end
#
#     it "should redirect to new user session path when not authenticated as a user" do
#       post :invite, :id => event.id.to_s, :invite => {:user_profile_id => member.id}
#       response.should redirect_to(new_user_session_path)
#     end
#
#     it "should respond forbidden when not a member" do
#       sign_in non_member
#       post :invite, :id => event.id.to_s, :invite => {:user_profile_id => member.id}
#       response.should be_forbidden
#     end
#
#     it "should respond forbidden when not admin" do
#       sign_in member
#       post :invite, :id => event.id.to_s, :invite => {:user_profile_id => member.id}
#       response.should be_forbidden
#     end
#   end

end
