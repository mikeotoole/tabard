- title 'Edit Subscription'

- card_on_file = !!@stripe
- card_is_present = (@stripe_card_token.present? or current_user.stripe_customer_token.present?)

- content_for :header do
  %meta{ name: "stripe-key", content: STRIPE_PUBLIC_KEY }
  = stylesheet_link_tag "top_level/subscriptions"

- content_for :footer do
  %script{ type: 'text/javascript' }
    :plain
      var requireConfirmation = #{(@invoice.persisted? or @invoice.period_end_date < Time.now) ? 'false' : 'true'};
  = javascript_include_tag "https://js.stripe.com/v1/"
  = javascript_include_tag "subscriptions"

%h1= shorten_words @community.name

= render 'shared/subscriptions_submenu'

= simple_form_for @invoice, url: subscription_url(@community), method: :put, html: {novalidate: true, id: "form_with_subscription"} do |f|
  %fieldset
    = hidden_field_tag :stripe_card_token
    %ol
      %li.plans
        = f.simple_fields_for :invoice_items, @current_plan_invoice_item do |sf|
          = sf.input :community_id, as: :hidden
          = sf.input :item_type, as: :hidden
          = sf.input :quantity, as: :hidden

        - @available_plans.each do |plan|
          - is_current = ((params[:upgrade] == 'true' and !plan.is_free_plan?) or (params[:upgrade] != 'true' and plan.id == @current_plan_invoice_item.item_id))
          %input{ id: "community_plan_#{plan.id}", type: 'radio', name: 'invoice[invoice_items_attributes][0][item_id]', data: {price: plan.price_per_month_in_cents, members: plan.max_number_of_users}, value: plan.id, checked: is_current ? 'checked' : nil }
          %label{ for: "community_plan_#{plan.id}", title: plan.description }
            %span.title= plan.title.gsub(/\s*community\s*/i, '')
            %span.price
              - if plan.price_per_month_in_cents > 0
                = "#{number_to_currency(plan.price_per_month_in_dollars)}/month"
              - else
                This one is on us
            %span.meta
              - if plan.price_per_month_in_cents > 0
                = "#{plan.max_number_of_users} members + custom roles"
              - else
                = "Up to #{plan.max_number_of_users} members"

    = render "communities/population", community: @community

    #upgrades.section
      %h1 Add Members
      %p
        Need room for more than 100 members?
        %br
        Let Tabard grow with you by adding additional member packs.
      %ol
        = f.simple_fields_for :invoice_items, @all_upgrades_invoice_items do |sf|
          = sf.input :community_id, as: :hidden
          = sf.input :item_type, as: :hidden
          = sf.input :item_id, as: :hidden
          - collection = (1..sf.object.item.max_number_of_upgrades).collect {|u| ["+#{number_with_delimiter(u * sf.object.item.number_of_bonus_users)} members â€” #{number_to_currency(u * sf.object.price_per_month_in_dollars, precision: 0)}/mo", u]}
          - collection.unshift(['None',0])
          - data = sf.object.persisted? ? {destroy: 'upgrade_pack'} : {}
          = sf.input :quantity, as: :radio_buttons, collection: collection, include_blank: false, label: false, wrapper_html: {class: 'select members_package', data: data}
          = sf.input :_destroy, as: :hidden, default: true, input_html: {data: data}

    - if @community.is_charge_exempt
      %blockquote#charge_exempt
        %h1 Discount
        = @community.charge_exempt_label
        %p
          %strong Regular Price:
          %strike= number_to_currency(@invoice.non_exempt_total_recurring_price_per_month_in_dollars(@community))
          %br
          %strong Discounted Price:
          = number_to_currency(@invoice.total_recurring_price_per_month_in_dollars(@community))

    - else
      #cc_input.section{ class: card_is_present ? '' : 'show_fields' }
        %h1 Payment

        - if card_is_present
          = render 'card/current', stripe: @stripe if card_on_file
          %menu
            = link_to 'Change card', 'javascript:;', class: 'newcard'
            = link_to 'Use card on file', 'javascript:;', class: 'onfile'

        %fieldset{ id: 'cc_fields', class: card_is_present ? 'hide' : '' }
          = render 'card/accepted'
          %ol= render 'card/fields'
          = render "subscriptions/notice"

    %p.submit
      = f.button :submit, 'Update Subscription'
