= f.input :name, input_html: { maxlength: WowCharacter::MAX_NAME_LENGTH }
= f.input :server_name, as: :radio_buttons, required: true, label: 'Server', collection: Wow.server_names, wrapper_html: { class: 'select with-label' }, input_html: { name: 'server_name' }
= f.input :faction, as: :radio_buttons, required: true, collection: Wow.factions, wrapper_html: { class: 'faction select with-label', affects: 'race' }, input_html: { name: 'faction' }
= render partial: 'shared/affected_dropdown', locals: { f: f, affected_by: 'faction', affected_by_value: wow_character.faction, label: 'Race', field: 'race', field_value: wow_character.race, collection: WowCharacter.faction_race_collection, affects: 'char_class' }
= render partial: 'shared/affected_dropdown', locals: { f: f, affected_by: 'race', affected_by_value: (wow_character.faction && wow_character.race ? "#{wow_character.faction}_#{wow_character.race.gsub(/\s/,'_')}" : ''), label: 'Class', field: 'char_class', field_value: wow_character.char_class, collection: WowCharacter.faction_race_class_collection }
= f.input :level, as: :string, input_html: { maxlength: 2 }, wrapper_html: { class: 'short' }
= f.input :gender, as: :radio_buttons, required: true, collection: WowCharacter::VALID_GENDERS
= f.input :about, as: :text, label: 'Optional Description', input_html: { rows: 5 }
%li.avatar{ class: f.object.errors.any? ? 'with-errors' : '' }
  - if !wow_character.persisted? or !wow_character.avatar_url.to_s or f.object.errors.any?
    = image_tag 'application/avatar@240.png', width: 240, height: 240
  - else
    = image_tag wow_character.avatar_url(:large), width: 240, height: 240
  = f.input :remove_avatar, as: :boolean, label: "Remove avatar", wrapper: false unless wow_character[:avatar].blank?
  %br
  = f.input :avatar, wrapper: false, hint: 'Maxium file size of 2mb. GIF, JPG, PNG.'
  = f.input :remote_avatar_url, label: "or image URL", wrapper: false
