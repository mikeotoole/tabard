!!!
%html
  %head
    %title= yield_for(:title, "#{current_community.name} - Tabardâ„¢")
    %link{ href: "/stylesheets/fonts.css", media: "screen", rel: "stylesheet", type: "text/css" }
    = stylesheet_link_tag "application/community"
    = stylesheet_link_tag use_default_theme? ? "themes/default" : "themes/#{current_community.theme_css}", class: 'theme'
    - if current_community.background_color or current_community.background_image or current_community.title_color
      %style{type: "text/css", media: "screen"}
        - unless !!current_community.title_color and current_community.title_color.gsub(/[^a-f0-9]/i, '') == ''
          = "body.theme #header .title { color: ##{current_community.title_color}; text-shadow: none; }"
        - unless !!current_community.background_color and current_community.background_color.gsub(/[^a-f0-9]/i, '') == ''
          = "body.theme , body.theme #content { background-color: ##{current_community.background_color}; }"
        - unless current_community.background_image_url == '/assets/application/blank.png'
          = "body, #content { background-image: url(#{current_community.background_image_url(:standard)}) !important; }"
    = yield :controller_css
    = render 'layouts/set_timezone' unless !!cookies[:timezone]
    = javascript_include_tag "application"
    = javascript_include_tag "community"
    = csrf_meta_tags
    = favicon_link_tag asset_path 'favicon.png'
    = yield :header
    = render 'layouts/ie'
    = render 'layouts/analytics'

  %body{ class: [body_classes,'theme'].flatten.join(' ') }
    #bar= render "layouts/bar_#{user_signed_in? ? 'in' : 'out'}"
    = render 'layouts/flash_messages'

    #content
      #header
        .title
          %strong= current_community.name
          - if !!current_community.slogan
            %cite= shorten_words current_community.slogan
        = render 'layouts/action_items' if has_action_items?
        .menu
          %ul
            %li
              = link_to (user_signed_in? and current_user.is_member? current_community) ? 'Dashboard' : 'Home', actual_community_url(current_community)
            - if user_signed_in? and current_user.is_member? current_community
              %li
                = link_to 'Events', events_url
            - if user_signed_in? and current_user.is_member? current_community
              %li
                = link_to 'Discussions', discussion_spaces_url
                - if discussion_items.any?
                  %ul
                    - discussion_items.each do |space|
                      %li= link_to shorten_words(space.name), space if space.persisted?
            - if user_signed_in? and current_user.is_member? current_community
              %li
                = link_to 'Announcements', announcements_url
                - if current_community.supported_games.any?
                  %ul
                    %li= link_to 'Community Announcements', community_announcements_url
                    - current_community.supported_games.includes(:community, :game).each do |supported_game|
                      - if supported_game.persisted?
                        %li= link_to supported_game.smart_name, game_announcements_url(supported_game)
            - if can? :index, PageSpace
              %li
                = link_to 'Wiki', page_spaces_url
                - if wiki_items.any?
                  %ul
                    - wiki_items.each do |space|
                      %li= link_to shorten_words(space.name), space if space.persisted?
            - if current_community.is_public_roster or (user_signed_in? and current_user.is_member? @community and @community.custom_forms.published.any?)
              %li
                = link_to 'Members', roster_assignments_url
                - if current_community.supported_games.any? and supported_games = current_community.supported_games.reject{|sg| !sg.persisted?} and supported_games.size > 1
                  %ul
                    - supported_games.each do |supported_game|
                      %li= link_to supported_game.smart_name, game_roster_assignments_url(supported_game)
            - if user_signed_in? and current_user.is_member? current_community and form_items.any?
              %li
                = link_to 'Forms', custom_forms_url
            - if user_signed_in? and current_user.communities.include?(current_community)
              - if management_navigation_items.any?
                %li{ class: 'special settings' }
                  = link_to 'Manage', can_manage?(current_community) ? edit_community_settings_url : my_roster_assignments_url
                  %ul
                    - management_navigation_items.each do |item|
                      %li{ class: item[:class] }= link_to item[:title], item[:link],  meta: (item[:meta] and item[:meta] > 0 ? item[:meta] : nil)
                    - unless current_user.user_profile == current_community.admin_profile
                      %li.leave= link_to 'Leave Community', community_profile_url(current_user.community_profiles.find{|cp| cp.community == current_community}), method: :delete, confirm: "If you leave this community, you will have to re-apply before coming back. Are you sure you want to leave?"
            - else
              %li{ class: 'special signup' }
                - if user_signed_in?
                  - if current_community.can_receive_application_from? current_user
                    = link_to 'Apply Now', new_community_application_url
                  - elsif current_user.application_pending? current_community
                    %a Application Pending
                - else
                  = link_to 'Apply Now', new_user_registration_url(subdomain: "secure", protocol: (Rails.env.development? ? "http://" : "https://"), community_id: current_community.id)
      #body
        = yield
        = render 'layouts/footer', current_layout: 'community'

    = yield :footer