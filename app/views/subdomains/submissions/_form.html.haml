= simple_form_for [submission.custom_form,submission], :html => {:novalidate => true} do |f|
  .questions
    %h1= submission.custom_form_name
    = f.simple_fields_for :submission do |sf|
      %fieldset
        %ol
          - submission.answers.each do |answer|
            = sf.simple_fields_for :answers, answer do |af|
              %li
                = af.input :question_id, :as => :hidden, :wrapper => false
                - case answer.question_type
                - when 'TextQuestion'
                  - case answer.question_style
                  - when 'short_answer_question'
                    = af.input :body, :as => :string, :wrapper => false, :label => answer.question_body, :required => answer.question_required
                  - when 'long_answer_question'
                    = af.input :body, :as => :text, :wrapper => false, :label => answer.question_body, :required => answer.question_required
                - when 'SingleSelectQuestion'
                  - c = answer.question_predefined_answers.collect{|pa| pa = [pa.body, pa.id]}
                  - case answer.question_style
                  - when 'select_box_question'
                    .select= af.input :body, :as => :radio, :wrapper => false, :label => false, :collection => c, :label => answer.question_body, :required => answer.question_required
                  - when 'radio_buttons_question'
                    = af.input :body, :as => :radio, :wrapper => false, :collection => c, :label => answer.question_body, :required => answer.question_required
                - when 'MultiSelectQuestion'
                  - c = answer.question_predefined_answers.collect{|pa| pa = [pa.body, pa.id]}
                  = af.input :body, :as => :check_boxes, :wrapper => false, :collection => c, :label => answer.question_body, :required => answer.question_required
  .sidebar
    .instructions
      %h2 Instructions
      :markdown
        #{submission.custom_form_instructions}
  %p.submit
    %button{ :type => 'submit' } Submit