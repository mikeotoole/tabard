%li{ :class => html_class_names(comment) }
  %blockquote
    %span.avatar
      - if comment.has_been_deleted
        = image_tag asset_path('application/avatar.png')
      - else
        = image_tag comment.poster.avatar_url(:small)
    %span.meta
      - if comment.has_been_deleted
        = last_action_word(comment).capitalize
      - else
        = "#{last_action_word(comment).capitalize} by"
        = link_to comment.poster.name, comment.user_profile
      %time= "#{time_ago_in_words(comment.updated_at)} ago"
    %p
      - if !comment.has_been_deleted
        = comment.body
        %br/
      - if comment.has_been_deleted
        %em Comment was deleted
      - elsif !comment.has_been_locked
        = link_to 'Reply to this', new_comment_path(:format => :js, :commentable_id => comment.id, :commentable_type => comment.class), :remote => true, :class => 'reply'
      - else
        %em Comment is locked
    %span.actions
      - if (can? :update, comment)
        = link_to 'Edit comment', edit_comment_path(comment), :title => 'Edit comment', :class => 'edit'
      - if (can? :destroy, comment)
        = link_to 'Delete comment', comment, :confirm => 'Are you sure?', :method => :delete, :title => 'Delete comment', :class => 'delete'
      - if !comment.has_been_locked and (can? :lock, comment)
        = link_to 'Lock comment', lock_comment_path(comment), :method => :lock, :class => 'lock', :title => 'Lock comment'
      - if comment.has_been_locked and (can? :unlock, comment)
        = link_to 'Unlock comment', unlock_comment_path(comment), :method => :unlock, :class => 'unlock', :title => 'Unlock comment'
  - if comment.comments.size > 0
    %ol
      - comment.comments.each do |reply|
        = render "subdomains/comments/comment", :comment => reply