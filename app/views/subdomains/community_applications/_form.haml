= simple_form_for community_application, html: { novalidate: true, class: 'community_application submission' } do |f|
  .questions
    %h1= community_application.custom_form_name
    = f.simple_fields_for :submission do |sf|
      %fieldset
        %ol
          - community_application.submission_answers.each do |answer|
            = sf.simple_fields_for :answers, answer do |af|
              %li{ class: (af.object.errors.any? ? 'with-errors' : '') }
                = af.input :question_id, as: :hidden, wrapper: false
                = af.input :question_body, as: :hidden, wrapper: false
                - case answer.question_style
                  - when 'short_answer_question'
                    = af.input :body, as: :string, wrapper: false, label: answer.question_body, required: answer.question_is_required, hint: answer.question_explanation
                  - when 'long_answer_question'
                    = af.input :body, as: :text, wrapper: false, label: answer.question_body, required: answer.question_is_required, hint: answer.question_explanation
                  - when 'select_box_question'
                    - c = answer.question_predefined_answers.collect{|pa| pa = [pa.body, pa.body]}
                    = af.input :body, as: :radio_buttons, wrapper_tag: :div, wrapper_html: {class: 'select with-label'}, collection: c, label: answer.question_body, required: answer.question_is_required, hint: answer.question_explanation
                  - when 'radio_buttons_question'
                    - c = answer.question_predefined_answers.collect{|pa| pa = [pa.body, pa.body]}
                    = af.input :body, as: :radio_buttons, wrapper: false, collection: c, label: answer.question_body, required: answer.question_is_required, hint: answer.question_explanation
                  - when 'check_box_question'
                    - c = answer.question_predefined_answers.collect{|pa| pa = [pa.body, pa.body]}
                    = af.input :body, as: :check_boxes, wrapper: false, collection: c, label: answer.question_body, required: answer.question_is_required, hint: answer.question_explanation
                    - if af.object.errors.any?
                      %mark.error= af.object.errors.full_messages.first
  .sidebar
    - if current_user.compatable_character_proxies(current_community).size > 0
      .characters
        %h2 Characters
        %p Select which of your characters you are applying with:
        - community_application.characters.each do |character|
          %label{ for: "community_application_character_ids_#{character.id}" }
            = image_tag character.avatar_url(:tiny), class: 'avatar'
            = character.name
        .select.picker= f.input :character_proxy_ids, as: :check_boxes, label: false, wrapper: false, collection: current_user.compatable_characters(current_community).collect{|character| character = [raw(image_tag(character.avatar_url(:tiny), class: 'avatar')) + character.name, character.id]}
    .instructions
      - unless community_application.custom_form_instructions.empty?
        %h2 Instructions
        :markdown
          #{shorten_words community_application.custom_form_instructions}
  %p.submit
    %button{ type: 'submit' } Submit
